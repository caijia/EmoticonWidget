<resources>
    <string name="app_name">EmoticonWidget</string>
    <string name="testxxx">从源码我们可以看出，各种不同操作方法内部实际上只是个不同cmd的Op对象，通过双向链表链起来了而已，至于为什么要是双向的呢，单链表不行吗？那是因为Fragment在act层面维护了一个回退栈，即如果你调用了ft.addToBackStack(null);这样的代码，那么当你按下back键的时候不是直接结束当前act，而是先从fragment栈里尝试pop出来栈顶的fragment。它不仅要向前进，还得支持向后退。 紧接着的是commit的源码，如下： 作者：tmp_zhao 链接：http://www.jianshu.com/p/47d20351b1ac 來源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。从源码我们可以看出，各种不同操作方法内部实际上只是个不同cmd的Op对象，通过双向链表链起来了而已，至于为什么要是双向的呢，单链表不行吗？那是因为Fragment在act层面维护了一个回退栈，即如果你调用了ft.addToBackStack(null);这样的代码，那么当你按下back键的时候不是直接结束当前act，而是先从fragment栈里尝试pop出来栈顶的fragment。它不仅要向前进，还得支持向后退。 紧接着的是commit的源码，如下： 作者：tmp_zhao 链接：http://www.jianshu.com/p/47d20351b1ac 來源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。从源码我们可以看出，各种不同操作方法内部实际上只是个不同cmd的Op对象，通过双向链表链起来了而已，至于为什么要是双向的呢，单链表不行吗？那是因为Fragment在act层面维护了一个回退栈，即如果你调用了ft.addToBackStack(null);这样的代码，那么当你按下back键的时候不是直接结束当前act，而是先从fragment栈里尝试pop出来栈顶的fragment。它不仅要向前进，还得支持向后退。 紧接着的是commit的源码，如下： 作者：tmp_zhao 链接：http://www.jianshu.com/p/47d20351b1ac 來源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。从源码我们可以看出，各种不同操作方法内部实际上只是个不同cmd的Op对象，通过双向链表链起来了而已，至于为什么要是双向的呢，单链表不行吗？那是因为Fragment在act层面维护了一个回退栈，即如果你调用了ft.addToBackStack(null);这样的代码，那么当你按下back键的时候不是直接结束当前act，而是先从fragment栈里尝试pop出来栈顶的fragment。它不仅要向前进，还得支持向后退。 紧接着的是commit的源码，如下： 作者：tmp_zhao 链接：http://www.jianshu.com/p/47d20351b1ac 來源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。从源码我们可以看出，各种不同操作方法内部实际上只是个不同cmd的Op对象，通过双向链表链起来了而已，至于为什么要是双向的呢，单链表不行吗？那是因为Fragment在act层面维护了一个回退栈，即如果你调用了ft.addToBackStack(null);这样的代码，那么当你按下back键的时候不是直接结束当前act，而是先从fragment栈里尝试pop出来栈顶的fragment。它不仅要向前进，还得支持向后退。 紧接着的是commit的源码，如下： 作者：tmp_zhao 链接：http://www.jianshu.com/p/47d20351b1ac 來源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。从源码我们可以看出，各种不同操作方法内部实际上只是个不同cmd的Op对象，通过双向链表链起来了而已，至于为什么要是双向的呢，单链表不行吗？那是因为Fragment在act层面维护了一个回退栈，即如果你调用了ft.addToBackStack(null);这样的代码，那么当你按下back键的时候不是直接结束当前act，而是先从fragment栈里尝试pop出来栈顶的fragment。它不仅要向前进，还得支持向后退。 紧接着的是commit的源码，如下： 作者：tmp_zhao 链接：http://www.jianshu.com/p/47d20351b1ac 來源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。从源码我们可以看出，各种不同操作方法内部实际上只是个不同cmd的Op对象，通过双向链表链起来了而已，至于为什么要是双向的呢，单链表不行吗？那是因为Fragment在act层面维护了一个回退栈，即如果你调用了ft.addToBackStack(null);这样的代码，那么当你按下back键的时候不是直接结束当前act，而是先从fragment栈里尝试pop出来栈顶的fragment。它不仅要向前进，还得支持向后退。 紧接着的是commit的源码，如下： 作者：tmp_zhao 链接：http://www.jianshu.com/p/47d20351b1ac 來源：简书 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</string>
</resources>
